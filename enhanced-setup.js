#!/usr/bin/env node

/**
 * Enhanced Setup Script for Qwen Code Internal LLM
 * Implements SetupWizard functionality without complex imports
 */

import fs from 'fs';
import path from 'path';
import { homedir } from 'os';
import http from 'http';
import https from 'https';

const USER_SETTINGS_DIR = path.join(homedir(), '.qwen');
const GLOBAL_ENV_PATH = path.join(USER_SETTINGS_DIR, '.env');
const LOCAL_ENV_PATH = path.join(process.cwd(), '.env');

console.log('🚀 Qwen Code Enhanced Setup Wizard');
console.log('=====================================');

// 서버 발견을 위한 후보 URL들
const CANDIDATE_URLS = [
  'http://localhost:8443/devport/api/v1',  // 테스트 프록시 서버
  'http://localhost:8443/api/v1',
  'http://localhost:8080/api/v1',
  'http://localhost:3000/api/v1',
  'https://localhost:8443/api/v1',
  'http://127.0.0.1:8443/api/v1',
];

// 서버 연결 테스트 함수
async function testServerConnection(url) {
  return new Promise((resolve) => {
    const startTime = Date.now();
    const isHttps = url.startsWith('https://');
    const client = isHttps ? https : http;
    
    // 간단한 POST 요청으로 chat/completions 엔드포인트 테스트
    const testUrl = `${url}/chat/completions`;
    const testData = JSON.stringify({
      model: 'test',
      messages: [{ role: 'user', content: 'ping' }],
      max_tokens: 1
    });
    
    const req = client.request(testUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(testData),
        'Authorization': 'Bearer test-key'
      },
      timeout: 3000,
      ...(isHttps && { rejectUnauthorized: false }),
    }, (res) => {
      const responseTime = Date.now() - startTime;
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        // 200이나 400번대도 서버가 응답한다면 건강한 것으로 간주
        const isHealthy = res.statusCode >= 200 && res.statusCode < 500;
        resolve({
          url,
          isHealthy,
          responseTime,
          status: res.statusCode,
        });
      });
    });

    req.on('error', () => {
      resolve({
        url,
        isHealthy: false,
        responseTime: -1,
        status: 'ERROR',
      });
    });

    req.setTimeout(3000, () => {
      req.destroy();
      resolve({
        url,
        isHealthy: false,
        responseTime: -1,
        status: 'TIMEOUT',
      });
    });

    req.write(testData);
    req.end();
  });
}

// 서버 자동 발견
async function discoverServers() {
  console.log('\n🔍 Discovering internal LLM servers...');
  const results = [];
  
  for (const url of CANDIDATE_URLS) {
    process.stdout.write(`  Testing ${url}... `);
    const result = await testServerConnection(url);
    
    if (result.isHealthy) {
      console.log(`✅ OK (${result.responseTime}ms)`);
      results.push(result);
    } else {
      console.log(`❌ ${result.status}`);
    }
  }
  
  return results.sort((a, b) => a.responseTime - b.responseTime);
}

// 설정 템플릿 생성
function generateConfigTemplate(config) {
  return `# Qwen Code Internal LLM Configuration
# Generated by Enhanced Setup Wizard

# LLM Server Configuration
INTERNAL_LLM_BASE_URL=${config.baseUrl}
INTERNAL_LLM_API_KEY=${config.apiKey}
INTERNAL_LLM_MODEL=${config.model}

# Optional Settings
${config.skipSSLVerification ? 'NODE_TLS_REJECT_UNAUTHORIZED=0' : '# NODE_TLS_REJECT_UNAUTHORIZED=0'}

# Debug Settings (uncomment if needed)
# DEBUG=1
# INTERNAL_LLM_VERBOSE=true

# Generated on: ${new Date().toISOString()}
`;
}

// 설정 저장
function saveConfig(config, scope = 'global') {
  const configContent = generateConfigTemplate(config);
  const configPath = scope === 'global' ? GLOBAL_ENV_PATH : LOCAL_ENV_PATH;
  
  // 디렉토리 생성 (글로벌인 경우)
  if (scope === 'global' && !fs.existsSync(USER_SETTINGS_DIR)) {
    fs.mkdirSync(USER_SETTINGS_DIR, { recursive: true });
    console.log(`📁 Created settings directory: ${USER_SETTINGS_DIR}`);
  }
  
  // 기존 설정 백업
  if (fs.existsSync(configPath)) {
    const backupPath = `${configPath}.backup.${Date.now()}`;
    fs.copyFileSync(configPath, backupPath);
    console.log(`📦 Backed up existing config to: ${backupPath}`);
  }
  
  // 새 설정 저장
  fs.writeFileSync(configPath, configContent, 'utf8');
  console.log(`✅ Configuration saved to: ${configPath}`);
  
  return configPath;
}

// 기존 설정 확인
function checkExistingConfigs() {
  const hasLocal = fs.existsSync(LOCAL_ENV_PATH);
  const hasGlobal = fs.existsSync(GLOBAL_ENV_PATH);
  
  console.log('\n📋 Checking existing configurations...');
  
  if (hasLocal) {
    console.log(`📁 Found local config: ${LOCAL_ENV_PATH}`);
  }
  
  if (hasGlobal) {
    console.log(`🌐 Found global config: ${GLOBAL_ENV_PATH}`);
  }
  
  if (!hasLocal && !hasGlobal) {
    console.log('📭 No existing configurations found');
  }
  
  return { hasLocal, hasGlobal };
}

// 자동 설정 메인 함수
async function autoSetup() {
  try {
    // 기존 설정 확인
    checkExistingConfigs();
    
    // 서버 자동 발견
    const healthyServers = await discoverServers();
    
    if (healthyServers.length === 0) {
      console.log('\n❌ No healthy servers found automatically.');
      console.log('\n💡 Try these solutions:');
      console.log('  • Start your internal LLM server');
      console.log('  • Check if the server is running on a standard port (8443, 8080, 3000)');
      console.log('  • Verify network connectivity');
      console.log('  • Run manual setup with custom server URL');
      return false;
    }
    
    // 최적 서버 선택
    const bestServer = healthyServers[0];
    console.log(`\n✅ Selected best server: ${bestServer.url} (${bestServer.responseTime}ms)`);
    
    // 기본 설정 생성
    const config = {
      baseUrl: bestServer.url,
      apiKey: 'test-key',  // 개발용 기본값
      model: 'internal-llm-model',  // 기본 모델명
      skipSSLVerification: bestServer.url.includes('localhost') && bestServer.url.startsWith('https://'),
    };
    
    // 설정 저장 (글로벌)
    const configPath = saveConfig(config, 'global');
    
    console.log('\n🎉 Automatic setup completed successfully!');
    console.log('\n📝 Next steps:');
    console.log('  1. Update the API key in your configuration file if needed');
    console.log('  2. Start your internal LLM server');
    console.log('  3. Run: qwen /validate');
    console.log('  4. Start using: qwen');
    
    console.log('\n💡 Additional commands:');
    console.log('  • qwen /diagnose - Quick connection test');
    console.log('  • qwen /validate - Comprehensive validation');
    
    if (config.apiKey === 'test-key') {
      console.log('\n⚠️  Note: Please update the API key in your configuration file:');
      console.log(`     ${configPath}`);
    }
    
    return true;
    
  } catch (error) {
    console.error('\n💥 Auto setup failed:', error.message);
    return false;
  }
}

// 수동 설정 가이드
function showManualSetup() {
  console.log('\n📝 Manual Setup Instructions');
  console.log('============================');
  
  console.log('\n1. Create configuration file:');
  console.log('   Global: ~/.qwen/.env');
  console.log('   Local: ./.env');
  
  console.log('\n2. Add these variables:');
  console.log('   INTERNAL_LLM_BASE_URL=http://localhost:8443/api/v1');
  console.log('   INTERNAL_LLM_API_KEY=your-api-key');
  console.log('   INTERNAL_LLM_MODEL=your-model-name');
  console.log('   NODE_TLS_REJECT_UNAUTHORIZED=0  # For development only');
  
  console.log('\n3. Test configuration:');
  console.log('   qwen /validate');
  
  console.log('\n4. Start using:');
  console.log('   qwen');
}

// 메인 실행
async function main() {
  const success = await autoSetup();
  
  if (!success) {
    showManualSetup();
  }
}

// 에러 핸들링
process.on('unhandledRejection', (reason, promise) => {
  console.error('\n💥 Unhandled Promise Rejection:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('\n💥 Uncaught Exception:', error.message);
  process.exit(1);
});

// 실행
main().catch(error => {
  console.error('\n💥 Setup failed:', error.message);
  showManualSetup();
  process.exit(1);
});